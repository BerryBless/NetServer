#pragma once
#pragma region DataManager

//===================================
//				전역변수
//===================================
// extern char		_initFilePath[];	// 초기 설정이 들어있는 파일 경로 
// extern char**	_stageDataPath;		// 스테이지 파일 경로의 리스트
 extern int		_stageDataCount;	// 몇 스테이지 까지 있나
extern BYTE*		_stageData;			// 스테이지 파일의 내용물
extern int			_stageNow;			// 스테이지 파일의 내용물 이 몇스테이지인가


//===================================
//				파일 읽기
// ----------------------------------
// buffer를 파일크기 만큼 malloc 후
// buffer에 파일의 모든 내용을 읽습니다.
// ----------------------------------
// 사용법)
// BYTE* buffer;
// Data_ReadFile(filePath, &buffer);
// 버퍼를 이용하여 뭔가 함
// free(buffer);	 // 안하면 메모리가 질질 새요!
// ----------------------------------
// TODO : free(buffer) 안해도 메모리 안새게 만들기
//===================================
bool Data_ReadFile(char* filePath, BYTE** buffer);

//===================================
//				초기화
// ----------------------------------
// 설정 파일을 읽어 데이터를 받을 준비를 합니다
// 파일 (Init.dat) 를 읽어 전역변수 데이터를 채웁니다.
// 초기파일 정보를 모두 읽으면 더이상 읽을필요가 없으므로 버퍼 할당 해지합니다
//===================================
void Data_Init();

//===================================
//			스테이지 불러오기
// ----------------------------------
// num 번째 스테이지 파일을 읽습니다.
// 파일의 버퍼를 _stageData에 저장하여 
// 스테이지를 초기화 할때마다 참조합니다.
// 스테이지가 바뀔때마다 _stageData를 free해줘야 합니다!
// 따라서 _stageData가 널포인터가 아니라면 free합니다
//===================================
void Data_LoadStage(int num);

#pragma endregion

#pragma region Parsing
// ==================================
// 파싱함수들
// 파일로 읽은 버퍼를 문자열로 가정하여 파싱합니다.
// index는 버퍼의 임의의 한 지점으로 부터 시작합니다
// 파싱 성공시 TRUE, 실패시 FALSE를 반환합니다.
// index를 공유하면서 연속적으로 파싱하는걸 전재로 합니다.
// ==================================

// 알파벳 또는 숫자를 만날때까지 index를 증가시킵니다.
void FindDataStartIndex(const char* str, int& index);
// ==================================
//			 데이터 파싱 함수
// ----------------------------------
// 버퍼에 있는 문자열을 index지점으로 부터 NULL, 공백, 엔터등 각 상황이 끝나는 곳 까지 읽어 value에 담습니다.
// ----------------------------------
// ** 반드시 val는 미리 할당되어 있어야합니다. **
// ==================================
bool Parsing(const char* str, int* val,int& index);		// 정수형데이터을 파싱합니다
bool Parsing(const char* str, float* val,int& index);	// 실수형데이터을 파싱합니다
bool Parsing(const char* str, char* val,int& index);	// 문자열(특수문자 O)데이터을 파싱합니다

#pragma endregion

