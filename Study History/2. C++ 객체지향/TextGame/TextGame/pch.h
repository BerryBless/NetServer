#pragma once
#include <stdio.h>
#include <memory.h>
#include <Windows.h>
#include <stdlib.h>
#include <winuser.h>
#include <time.h>
#include "Profiler.h"

#define CRASH() int* nPtr = nullptr; *nPtr = 0 // 크래쉬!

#define INIT_FILE_PATH "Data/Init.dat" // 파일경로
#define STRING_LEN_MAX		64		// 파일 경로 문자열 최대값
#define dfSCREEN_WIDTH		81		// 콘솔 가로 80칸 + NULL
#define dfSCREEN_HEIGHT		24		// 콘솔 세로 24칸
#define MONSTER_MAX			20		// 한 스테이지에 최대 몬스토 수
#define PROJECTILE_MAX		20		// 화면에 보이는 최대 투사체 수

#define FPS_DELAY			40		// 40ms마다

// 오브젝트가 몬스터인가? 체크 매개변수 : ObjectType 타입
// ObjectType 가 몬스터 범위 내라면 true
#define IS_MONSTER(obj) (int)ObjectType::Monster <= (int)obj && \
						(int)obj < (int)ObjectType::MonsterEnd
#define IF_PTR_NULL(ptr) if(ptr == nullptr) 

// ============================================================================
//									좌표계
// X, Y =  map[Y][X]
// ============================================================================
struct Position {
	int X;
	int Y;
};


// ============================================================================
//								방향 이동
// ---------------------------------------------------------------------------
//			 [0](i-1,j)
// [3](i,j-1)	[4](i,j)	[1](i,j+1)
//			 [2](i+1,j)
// ============================================================================
const int _dx[5] = { 0,1,0,-1,0 };
const int _dy[5] = { -1,0,1,0,0 };
enum class Direction {
	Up = 0,
	Right,
	Down,
	Left,
	None,
};
// ============================================================================
//							DATA SHEET
// _gameState[][]에 들어가있는 정수는 다음의 의미를 가지고 있다!
// ---------------------------------------------------------------------------
// ' ' - 0 : 빈칸
// ---------------------------------------------------------------------------
// 1~9 : 맵오브젝트 관련
// '#' - 1 : 벽 (못감)
// 'O' - 2 : 포탈 (다음 스테이지로!)
// 
// ---------------------------------------------------------------------------
// 10 ~ 19 게임플레이 관련
// 'P' - 10 : player
// 11 : 투사체
// 투사체가 가지는 방향에따라 위'^' 오른쪽'>' 아래'v' 왼쪽'<' 
// 
// ---------------------------------------------------------------------------
// 20 ~ 몬스터 관련
// 'M' - 20 : 패턴없는 몬스터  
// 'R' - 21 : 돌맹이			(4방향 랜덤으로 구름)
// 'T' - 22 : 터렛			(직선상에 플레이어가 있음 투사체 발싸)
// 'q' - 23 : 도플갱어		(플레이어의 반대방향으로 이동)
// END : Monster ~ MonsterEnd 사이의 범위인지 확인하기 위한 맴버, 동시에 몬스터 오류코드
// ============================================================================
enum class ObjectType {
	// 비어있음
	Empty = 0,

	// ----------------------------------------
	// 맵데이터
	Blocked = 1,
	Portal,


	// ----------------------------------------
	// 플레이 관련

	Player = 10,
	Projectile,

	// ----------------------------------------
	// 몬스터 관련

	Monster = 20,	// 20 : (M) 그냥 서있음 (테스트용) , 몬스터 대역폭의 시작지점
	RockNRoll,		// 21 : (R) 상하좌우 랜덤으로 이동, 화살은 안날림
	Turret,			// 22 : (T) 플레이어가 직선상 (x 나 y 축 차이가 0) 이면 투사체 발싸
	Doppelganger,	// 23 : (q) 플레이어 행동을 반대로 따라함
	MonsterEnd		// 24 : 대여폭의 이 범위까지 몬스터입니다를 알려줌, 이상한 몬스터를 받았을때 몬스터 오류코드
};
