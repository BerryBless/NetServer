#pragma once
#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "winmm.lib" )

#include <WinSock2.h>
#include <ws2tcpip.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "CRingBuffer.h"
#include "Protocol.h"
#include "CClient.h"
#include "CChatRoom.h"
#include "CPacket.h"

//#define PRINTSTEP
#define CRASH() do{int *nptr = nullptr; *nptr = 1;}while(0)

//////////////////////////////////////////////////////////////////////////
// 리슨소켓을 바인딩하고 비동기 소켓으로 설정한다
// 
// Parameters: 없음.
// Return: (BOOL) 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL NetworkInitServer(); // 초기화

//////////////////////////////////////////////////////////////////////////
// 접속한 클라이언트를 63, 리슨소켓을 1로 나뉘어 select모델을 돌린다
// 
// Parameters: 없음.
// Return: (BOOL) 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL NetworkPorc(); // 네트워크 동작// select 모델을 돌릴 루프 



//////////////////////////////////////////////////////////////////////////
// NetworkPorc()에서 세팅한 select 셋을 select()를 호출후, 그에 맞는 처리한다 
// 
// Parameters: DWORD *, SOCKET *, FD_SET *, FD_SET *
// Return: (BOOL) 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL SelectProc(DWORD *dwpTableID, SOCKET * pTableSocket, FD_SET * pReadSet,FD_SET *pWriteSet);	// select()가 돌아갈 함수

//////////////////////////////////////////////////////////////////////////
// 리슨의 백로그에 뭔가 와서 accept로 빼온다!
// 
// Parameters: 없음
// Return: (BOOL) 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL AcceptProc();	// Accept() 처리시 처리해야할 일 (플레이어 생성 등)




// send
#pragma region Send
//////////////////////////////////////////////////////////////////////////
// send링버퍼에 있는 내용을 클라이언트의 소켓으로 보낸다
// 
// Parameters: CClient *
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void SendProc(CClient *pClient); // sendQ에서 메시지 빼서 send()에 보내기

//////////////////////////////////////////////////////////////////////////
// pClient의 send링버퍼에 헤더 + 직렬화 패킷을 넣는다
// 
// Parameters: CClient *, st_PACKET_HEADER *, CPacket *
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void SendUnicast(CClient *pClient, st_PACKET_HEADER *pHeader, CPacket *pPacket); // pClient->snedQ에 chpBuffer넣기

//////////////////////////////////////////////////////////////////////////
// 클라이언트 컨테이너를 순회하며 send링버퍼에 헤더 + 직렬화 패킷을 넣는다
// 
// Parameters: CClient *, st_PACKET_HEADER *, CPacket *
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void SendBroadcast(CClient *pClientx, st_PACKET_HEADER *pHeader, CPacket *pPacket);// pClientx를 제외한 모든 플레이어의 sendQ에 chpBuffer넣기
//////////////////////////////////////////////////////////////////////////
// pRoom에 있는 클라이언트를 순회하며 send링버퍼에 헤더 + 직렬화 패킷을 넣는다
// 
// Parameters: CChatRoom *, CClient *, st_PACKET_HEADER *, CPacket *
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void SendBroadcastRoom(CChatRoom *pRoom, CClient *pClientx, st_PACKET_HEADER *pHeader, CPacket *pPacket); // 당사자 제외 룸전체에게 뿌리기

#pragma endregion





// recv
#pragma region Recv
//////////////////////////////////////////////////////////////////////////
// 해당 클라이언트의 recv링버퍼에 온 내용을 넣고 RecvPacket()를 호출한다
// 
// Parameters: CClient *
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void RecvProc(CClient *pClient);	// Client가 select반응이 왔을 넣기
//////////////////////////////////////////////////////////////////////////
// recv링버퍼에 온 내용을 직렬화 버퍼에 넣고 컨텐츠처리 함수를 호출한다
// 
// Parameters: CClient *
// Return: 없음
//////////////////////////////////////////////////////////////////////////
int	RecvPacket(CClient *pClient);
#pragma endregion


//////////////////////////////////////////////////////////////////////////
// 이 아이디를 가진 클라를 탐색후 삭제한다
// 
// Parameters: DWORD
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void Disconnect(DWORD dwUID); //stpClient를 연결끊기 

//////////////////////////////////////////////////////////////////////////
// 리슨소켓을 닫고 네트워크를 정리한다.
// 
// Parameters: 없음
// Return: 없음
//////////////////////////////////////////////////////////////////////////
void NetworkCloseServer(); // 정리



#pragma region WRAPPING
// 클라이언트

//////////////////////////////////////////////////////////////////////////
// UID를 가진 클라이언트를 생성후, 클라를 관리하는 컨테이너에 넣는다
// 생성된 클라이언트의 포인터를 리턴한다
// 
// Parameters: DWORD
// Return: CClient *
//////////////////////////////////////////////////////////////////////////
CClient *InsertClient(DWORD dwUID);
//////////////////////////////////////////////////////////////////////////
// UID로 클라이언트를 탐색하고
// 탐색된 클라이언트의 포인터를 리턴한다
// 
// Parameters: DWORD
// Return: CClient *
//////////////////////////////////////////////////////////////////////////
CClient *FindClient(DWORD dwUID);
//////////////////////////////////////////////////////////////////////////
// UID로 클라이언트를 삭제
// 
// Parameters: DWORD
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL EraseClient(DWORD dwUID);

// 이름 중복용


//////////////////////////////////////////////////////////////////////////
// 중복된 닉네임 확인
// 
// Parameters: wstring
// Return: 있음(true) / 없음(false)
//////////////////////////////////////////////////////////////////////////
BOOL IsUsername(std::wstring wsUsername);
//////////////////////////////////////////////////////////////////////////
// 중복된 닉네임 체크넣기
// 
// Parameters: wstring, DWORD
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL InsertUsername(std::wstring wsUsername, DWORD dwUID);
//////////////////////////////////////////////////////////////////////////
// 중복된 닉네임 체크삭제
// 
// Parameters: wstring
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL EraseUsername(std::wstring wsUsername);

// 채팅방
// 삽입
//////////////////////////////////////////////////////////////////////////
// UID를 가진 룸를 생성후, 클라를 관리하는 컨테이너에 넣는다
// 생성된 클라이언트의 포인터를 리턴한다
// 
// Parameters: DWORD
// Return: CClient *
//////////////////////////////////////////////////////////////////////////
CChatRoom *InsertRoom(DWORD dwRID);
// 검색
//////////////////////////////////////////////////////////////////////////
// RID로 룸를 탐색하고
// 탐색된 룸 포인터를 리턴한다
// 
// Parameters: DWORD
// Return: CClient *
//////////////////////////////////////////////////////////////////////////
CChatRoom *FindRoom(DWORD dwRID);
// 삭제
//////////////////////////////////////////////////////////////////////////
// RID를 가진 룸를 삭제
// 
// Parameters: DWORD
// Return: 성공/실패
//////////////////////////////////////////////////////////////////////////
BOOL EraseRoom(DWORD dwRID);

// 이름 중복용
//////////////////////////////////////////////////////////////////////////
// 중복된 방제 확인
// 
// Parameters: wstring
// Return: 있음(true) / 없음(false)
//////////////////////////////////////////////////////////////////////////
BOOL IsRoomname(std::wstring wsRoomname); // 이름이 이미 있으면 TRUE
//////////////////////////////////////////////////////////////////////////
// 중복된 방제 체크넣기
// 
// Parameters: wstring, DWORD
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL InsertRoomname(std::wstring wsRoomname, DWORD dwRID);
//////////////////////////////////////////////////////////////////////////
// 중복된 방제 체크삭제
// 
// Parameters: wstring
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL EraseRoomname(std::wstring wsRoomname);


// 룸에 들어가기
BOOL RoomEnter(CClient *pClient, CChatRoom *pRoom);
// 룸에 나오기
BOOL RoomLeave(CClient *pClient, CChatRoom *pRoom);
#pragma endregion
