//////////////////////////////////////////////////////////////
// Windows 의 콘솔 화면에서 커서 제어.
//
//////////////////////////////////////////////////////////////
#ifndef __CONSOLE__
#define __CONSOLE__


// 매크로
#define I_SCREENBUFFER			CScreenBuffer::GetInstance()			// 스크린 버퍼 인스턴스 가져오기
#define SPRITE_DRAW(x,y,sprite) I_SCREENBUFFER->Sprite_Draw(x,y,sprite)	// 스프라이트 그리기


// ============================================================================
//						CScreenBuffer
// ---------------------------------------------------------------------------
// 화면 출력하는 싱글톤 클래스
// ============================================================================
class CScreenBuffer {
#pragma region Singleton 
private:
	// 싱글톤
	CScreenBuffer();
	~CScreenBuffer();
public:
	// 전역 인스턴스를 얻어올 전역 함수
	static CScreenBuffer *GetInstance() {
		static CScreenBuffer _Instance;
		return &_Instance;
	};
#pragma endregion

#pragma region Console Screen
public:
	//-------------------------------------------------------------
	// 콘솔 제어를 위한 준비 작업.
	//
	//-------------------------------------------------------------
	void cs_Initial(void);


	//-------------------------------------------------------------
	// 콘솔 화면의 커서를 X, Y 좌표로 이동시킨다.
	//
	//-------------------------------------------------------------
	void cs_MoveCursor(int iPosX, int iPosY);

	//-------------------------------------------------------------
	// 콘솔 화면을 조기화 한다.
	//
	//-------------------------------------------------------------
	void cs_ClearScreen(void);

#pragma endregion

#pragma region PrintConsol
private:
	//--------------------------------------------------------------------
	// 화면 깜빡임을 없애기 위한 화면 버퍼.
	// 게임이 진행되는 상황을 매번 화면을 지우고 비행기 찍고, 지우고 찍고,
	// 하게 되면 화면이 깜빡깜빡 거리게 된다.
	//
	// 그러므로 화면과 똑같은 크기의 메모리를 할당한 다음에 화면에 바로 찍지않고
	// 메모리(버퍼)상에 그림을 그리고 메모리의 화면을 그대로 화면에 찍어준다.
	//
	// 이렇게 해서 화면을 매번 지우고, 그리고, 지우고, 그리고 하지 않고
	// 메모리(버퍼)상의 그림을 화면에 그리는 작업만 하게 되어 깜박임이 없어진다.
	//
	// 버퍼의 각 줄 마지막엔 NULL 을 넣어 문자열로서 처리하며, 
	// 한줄한줄을 printf 로 찍어나갈 것이다.
	//
	// for ( N = 0 ~ height )
	// {
	// 	  cs_MoveCursor(0, N);
	//    printf(szScreenBuffer[N]);
	// }
	//
	// 줄바꿈에 printf("\n") 을 쓰지 않고 커서좌표를 이동하는 이유는
	// 화면을 꽉 차게 출력하고 줄바꿈을 하면 2칸이 내려가거나 화면이 밀릴 수 있으므로
	// 매 줄 출력마다 좌표를 강제로 이동하여 확실하게 출력한다.
	//--------------------------------------------------------------------
	char szScreenBuffer[dfSCREEN_HEIGHT][dfSCREEN_WIDTH];
	HANDLE  hConsole;

public:
	//--------------------------------------------------------------------
	// 버퍼의 내용을 화면으로 찍어주는 함수.
	//
	// 적군,아군,총알 등을 szScreenBuffer 에 넣어주고, 
	// 1 프레임이 끝나는 마지막에 본 함수를 호출하여 버퍼 -> 화면 으로 그린다.
	//--------------------------------------------------------------------
	void Buffer_Flip(void);
	//--------------------------------------------------------------------
	// 화면 버퍼를 지워주는 함수
	//
	// 매 프레임 그림을 그리기 직전에 버퍼를 지워 준다. 
	// 안그러면 이전 프레임의 잔상이 남으니까
	//--------------------------------------------------------------------
	void Buffer_Clear(void);

	//--------------------------------------------------------------------
	// 버퍼의 특정 위치에 원하는 문자를 출력.
	//
	// 입력 받은 X,Y 좌표에 아스키코드 하나를 출력한다. (버퍼에 그림)
	//--------------------------------------------------------------------
	void Sprite_Draw(int iX, int iY, char chSprite);

	//--------------------------------------------------------------------
	// 버퍼의 특정 위치에 원하는 문자열를 출력.
	//
	// 입력 받은 X,Y 좌표에 입력받은 길이만큼 아스키코드를 출력한다. (버퍼에 그림)
	//--------------------------------------------------------------------
	void Sprite_Draw(int iX, int iY, const char *chSprite, int len);

#pragma endregion
};
#endif