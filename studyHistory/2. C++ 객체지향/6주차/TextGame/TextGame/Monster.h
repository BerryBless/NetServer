#pragma once

#define MONSTER_PATTERN_DELAY 1000

// ============================================================================
//						Monster 구조체
// ---------------------------------------------------------------------------
// 현재좌표,방향 저장
// ============================================================================
struct Monster {
	bool Visable;				// 몬스터가 살았나
	Position Pos;				// 좌표
	Direction Dir;				// 몬스터가 바라보는 방향 : 이방향으로 공격
	ObjectType Type;			// 몬스터 타입
	int Hp;						// 체력
	time_t PatternTickCount;	// 몬스터가 패턴에 사용할 틱카운터
};

// extern Monster _monster[MONSTER_MAX];	//	스테이지의 몬스터 리스트


// ============================================================================
//							몬스터 초기화
// ---------------------------------------------------------------------------
// _monster[] 을 처음부터 끝가지 순회하면서 
// 초기값
// _monster[i].Visable				= false
// _monster[i].Pos					= (0,0)	
// _monster[i].Dir					= None
// _monster[i].Type					= Monster
// _monster[i].Hp					= 0
// _monster[i].PatternTickCount		= 0
// 를 차례대로 넣는다.
// ============================================================================
void Monster_Init();


// ============================================================================
//						Monster 스폰
// ---------------------------------------------------------------------------
// GameLoadStage()에서만 호출!
// _gameState에 몬스터 좌표 등록하기
//		스폰을 못하면 바로 리턴합니다.
// 처음부터 순회하며 Visable == false 인곳을 찾아
// _gameState[pos.Y][pos.X] = type
// _monster[i].Pos = pos
// Visable = true
// 넣기
// ============================================================================
void Monster_Spawn(Position pos, ObjectType type);
void Monster_Spawn(int iX, int iY, ObjectType type);

// ============================================================================
//							투사체 찾기
// ---------------------------------------------------------------------------
// _monster[] 을 처음부터 끝가지 순회하면서
// _monster[i].Visable == true 이면서
// _monster[i].Pos == pos 인 지점을 찾아
// *_monster[i]를 반환합니다.
// ============================================================================
Monster* Monster_Find(Position pos);
Monster* Monster_Find(int iX, int iY);

// ============================================================================
//						Monster 움직이기
// ---------------------------------------------------------------------------
// dir 방향대로 맵상에 1칸을 움직임
// 이동했으면 ObjectType::Empty
// 이동에 실패했으면 막힌 방해물 타입을 반환합니다!
// ============================================================================
ObjectType Monster_Move(Monster* monster, Direction dir);

// ============================================================================
//						Monster 공격
// ---------------------------------------------------------------------------
// 투사체만 날릴 수 있음
// 투사체를 날릴곳을 계산한뒤
// 투사체 에게 발사 하라고 떠넘기기
// ============================================================================
void Monster_Attack(Monster* monster);

// ============================================================================
//							업데이트
// ---------------------------------------------------------------------------
// 몬스터 마다 정해진 패턴으로 업데이트 합니다
// ============================================================================
void Monster_Update();


// ============================================================================
//						Monster 피격
// ---------------------------------------------------------------------------
// 몬스터의 포인터를 받고 포인터가 가르키는 몬스터에 피격 판정을 합니다.
//  Hp가 1씩 감소합니다
// Hp가 1보다 작아지면 소멸합니다
// ============================================================================
void Monster_Hit(Monster* monster);

// ============================================================================
//						Monster 소멸
// ---------------------------------------------------------------------------
// 몬스터의 포인터를 받고 포인터가 가르키는 몬스터를 소멸 합니다.
// Game_DissObject(monster->Pos) 호출하여 스테이지에서 소멸 시킵니다
// *monster을 초기값으로 되돌립니다
// ============================================================================
void Monster_Diss(Monster* monster);




#pragma region Monster Type Pattern

// ============================================================================
//						몬스터 타입별 패턴 AI
// ---------------------------------------------------------------------------
// TYPE 별 패턴
// Monster = 20,	// 20 : (M) 그냥 서있음 (테스트용) , 몬스터 대역폭의 시작지점
// RockNRoll,		// 21 : (R) 상하좌우 랜덤으로 이동, 화살은 안날림
// Turret,			// 22 : (T) 플레이어가 직선상 (x 나 y 축 차이가 0) 이면 투사체 발싸
// Doppelganger,	// 23 : (q) 플레이어 행동을 반대로 따라함
// MonsterEnd		// 24 : 대여폭의 이 범위까지 몬스터입니다를 알려줌
// ============================================================================

// ============================================================================
//						방향계산
// ---------------------------------------------------------------------------
// src -> dest 방향
// 상하좌우 직선상만 계산
// 나머지는 None방향으로 버려짐
// Up	: src.X == dest.X && src.Y < dest.Y
// Down	: src.X == dest.X && src.Y > dest.Y
// Right: src.X > dest.X && src.Y == dest.Y
// Left : src.X < dest.X && src.Y == dest.Y
// ============================================================================
Direction SrcToDestDir(Position src, Position dest);

// ============================================================================
//						RockNRoll
// ---------------------------------------------------------------------------
// 1초마다 랜덤으로 굴러감
// 구르기 실패 이유가 플레이어면
// 플레이어 즉 사 (돌에 깔림)
// ============================================================================
void Monster_RockNRoll(Monster* monster);

// ============================================================================
//						Turret
// ---------------------------------------------------------------------------
// 행,열 직선상에 플레이어가 있으면 발싸 (벽판정 X)
// SrcToDestDir(Turret, player) 리턴값 있으면
// 리턴값으로 발싸
// ============================================================================
void Monster_Turret(Monster* monster);

// ============================================================================
//						Doppelganger
// ---------------------------------------------------------------------------
// 플레이어의 입력시 움직임
// 움직임을 점대칭으로 따라함
// 플레이어에 플레그 (_player.Input)을 달아놈
// 공략법 : 바로 옆으로 붙어서 공격 (플레이어 판정이 우선)
// ============================================================================
void Monster_Doppelganger(Monster* monster);



#pragma endregion